name: Delete Old ECR Images

on:
  workflow_dispatch:  # Allows manual trigger

jobs:
 delete_old_tags:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch all tags
        run: |
          git fetch --all --tags

      - name: Get tags older than 30 days
        id: old_tags
        run: |
          # Get tags older than 30 days and store them in a variable
          OLD_TAGS=$(git for-each-ref --sort=creatordate --format '%(creatordate:short) %(refname:short)' refs/tags | awk -v date="$(date -d '30 days ago' +%Y-%m-%d)" '$1 < date {print $2}')
          echo "::set-output name=tags::$OLD_TAGS"

      - name: Delete old tags
        if: steps.old_tags.outputs.tags != ''
        run: |
          # Iterate and delete each tag older than 30 days
          for tag in ${{ steps.old_tags.outputs.tags }}; do
            echo "Deleting tag $tag"
            git tag -d $tag
            git push origin :refs/tags/$tag
          done
          
 cleanup-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: sudo apt-get install gh
      
      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token

      - name: Install jq for JSON parsing
        run: sudo apt-get install jq -y

      - name: Delete Old Releases
        env:
          DAYS_TO_KEEP: "1"
        run: |
          #!/bin/bash
          set -e

          days_to_keep="${DAYS_TO_KEEP}"

          # Calculate cutoff date (releases older than this will be deleted)
          cutoff_date=$(date -d "$days_to_keep days ago" +%Y-%m-%dT%H:%M:%SZ)

          echo "Cutoff date for deleting releases: $cutoff_date"

          # List all releases (limit to 100) and check their creation date
          releases_to_delete=$(gh release list --limit 100 --json tagName,createdAt | \
            jq -r --arg cutoff "$cutoff_date" '.[] | select(.createdAt < $cutoff) | .tagName')

          # Check if there are any releases to delete
          if [ -z "$releases_to_delete" ]; then
            echo "No releases older than $days_to_keep days to delete."
          else
            echo "Deleting the following releases:"
            echo "$releases_to_delete"

            # Delete each release found
            echo "$releases_to_delete" | while read -r release_tag; do
              gh release delete -y "$release_tag"
              echo "Deleted release: $release_tag"
            done

            echo "Release deletion complete."
          fi
 cleanup-workflows:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: sudo apt-get install gh
      
      - name: Authenticate with GitHub CLI
        run: gh auth login --with-token

      - name: Install jq for JSON parsing
        run: sudo apt-get install jq -y

      - name: Delete Old Workflow Runs
        env:
          WORKFLOW_FILE: "4-merge-your-pull-request.yml" 
          DAYS_TO_KEEP: "2"
        run: |
          #!/bin/bash
          set -e

          workflow_file="${WORKFLOW_FILE}"
          days_to_keep="${DAYS_TO_KEEP}"

          # Calculate cutoff date (runs older than this will be deleted)
          cutoff_date=$(date -d "$days_to_keep days ago" +%Y-%m-%dT%H:%M:%SZ)

          echo "Cutoff date for deleting workflow runs: $cutoff_date"

          # List all workflow runs for the specified workflow file, limited to 100
          echo "Listing all workflow runjobs:s for $workflow_file:"
          gh run list --limit 100 --workflow=$workflow_file --json databaseId,createdAt | \
            jq -r --arg cutoff "$cutoff_date" '.[] | select(.createdAt < $cutoff) | .databaseId' > runs_to_delete.txt

          # Check if there are any runs to delete
          if [ ! -s runs_to_delete.txt ]; then
            echo "No workflow runs older than $days_to_keep days to delete."
          else
            echo "Deleting the following workflow runs:"
            cat runs_to_delete.txt

            # Delete each workflow run found
            cat runs_to_delete.txt | xargs -I{} gh run delete {}

            echo "Deletion complete."
          fi

   
